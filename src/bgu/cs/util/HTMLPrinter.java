package bgu.cs.util;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Logger;

import org.stringtemplate.v4.ST;

import bgu.cs.util.graph.MultiGraph;
import bgu.cs.util.graph.visualization.GraphToHTMLRenderer;
import bgu.cs.util.graph.visualization.GraphicProperties;
import bgu.cs.util.graph.visualization.GraphizVisualizer;

/**
 * Outputs HTML-formatted information to aid visualizing, debugging,
 * and summarizing information generated by an application.
 * 
 * @author romanm
 */
public class HTMLPrinter {
	protected STGLoader templates = new STGLoader(HTMLPrinter.class);
	protected String title;
	protected String outputDirPath;
	protected GraphToHTMLRenderer graphVisualizer = new GraphizVisualizer();
	protected final Logger logger;
	protected boolean printedConstantFiles = false;

	/**
	 * Constructs a printer with a default logger.
	 * 
	 * @param title
	 *            The title of the main HTML page.
	 * @param outputDirPath
	 *            The directory in which files are created.
	 */
	public HTMLPrinter(String title, String outputDirPath) {
		this.title = title;
		this.outputDirPath = outputDirPath;
		this.logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
	}

	/**
	 * Constructs a printer with a default logger.
	 * 
	 * @param title
	 *            The title of the main HTML page.
	 * @param outputDirPath
	 *            The directory in which files are created.
	 * @param logger
	 *            A logger for error messages.
	 */
	public HTMLPrinter(String title, String outputDirPath, Logger logger) {
		this.title = title;
		this.outputDirPath = outputDirPath;
		this.logger = logger;
	}

	/**
	 * A list of descriptions and links.
	 */
	protected ArrayList<Pair<String, String>> descriptionFileList = new ArrayList<>();

	/**
	 * Re-prints the table of contents file.
	 * 
	 * @return true if no I/O errors occurred.
	 */
	public boolean refresh() {
		if (!printedConstantFiles) {
			boolean ok = printEmptyFrame() && printIndexFile();
			if (!ok) {
				return false;
			}
			printedConstantFiles = true;
		}
		return printTableOfContentsFile();
	}
	
	public void severe(String message) {
		logger.severe(message);
	}

	public void warning(String message) {
		logger.warning(message);
	}
	
	public void info(String message) {
		logger.info(message);
	}
	
	public boolean addCodeFile(String fileName, String content, String description) {
		ST template = templates.load("code");
		template.add("description", description);
		content = content.replace("<", "&lt;");
		content = content.replace(">", "&gt;");
		template.add("content", content);
		return addTextFile(fileName, template.render(), description) && refresh();
	}

	public boolean addLink(String url, String description) {
		descriptionFileList.add(new Pair<String, String>(description, url));
		return refresh();
	}

	public boolean addTextFile(String fileName, String content, String description) {
		String finalHTMLFileName = outputDirPath + File.separator + fileName + ".html";
		File file = new File(finalHTMLFileName);
		try {
			String path = file.getCanonicalPath();
			FileUtils.stringToFile(content, path);
			descriptionFileList.add(new Pair<String, String>(description, file.getName()));
		} catch (IOException e) {
			logger.severe("Unable to write to file " + file.getName() + " (" + e.getMessage() + ")!");
			return false;
		}
		return refresh();

	}

	public <V, ED> boolean addGraph(MultiGraph<V, ED> graph, String description) {
		return addGraph(graph, description, new GraphicProperties<>());
	}

	public <V, ED> boolean addGraph(MultiGraph<V, ED> graph, String description, GraphicProperties<V, ED> gprops) {
		String filename = "graph_" + descriptionFileList.size();
		File file = new File(outputDirPath + File.separator + filename + ".html");
		try {
			graphVisualizer.renderToFile(graph, gprops, description, filename, outputDirPath);
			descriptionFileList.add(new Pair<String, String>(description, file.getName()));
		} catch (IOException e) {
			logger.severe("Unable to write to file " + file.getName() + " (" + e.getMessage() + ")!");
			return false;
		}
		return refresh();
	}

	protected boolean printIndexFile() {
		ST template = templates.load("index");
		File file = new File(outputDirPath + File.separator + "index.html");
		try {
			FileUtils.stringToFile(template.render(), file.getCanonicalPath());
		} catch (IOException e) {
			logger.severe("Unable to write to file " + file.getName() + " (" + e.getMessage() + ")!");
			return false;
		}
		return true;
	}

	protected boolean printTableOfContentsFile() {
		ST template = templates.load("tableOfContents");
		template.add("title", title);

		for (Pair<String, String> entry : descriptionFileList) {
			template.add("descriptionFileList", entry);
		}

		File file = new File(outputDirPath + File.separator + "main.html");
		try {
			FileUtils.stringToFile(template.render(), file.getCanonicalPath());
		} catch (IOException e) {
			logger.severe("Unable to write to file " + file.getName() + " (" + e.getMessage() + ")!");
			return false;
		}

		return true;
	}

	protected boolean printEmptyFrame() {
		ST template = templates.load("empty");
		File file = new File(outputDirPath + File.separator + "empty.html");
		try {
			FileUtils.stringToFile(template.render(), file.getCanonicalPath());
		} catch (IOException e) {
			logger.severe("Unable to write to file " + file.getName() + " (" + e.getMessage() + ")!");
			return false;
		}
		return true;
	}
}